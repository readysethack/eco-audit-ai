import axios, { AxiosError } from 'axios';

// Create an axios instance with custom config
const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL || 'http://localhost:5000',
  headers: {
    'Content-Type': 'application/json',
  },
  timeout: 60000, // Increased to 60 seconds to account for cold starts
});

// Request interceptor for API calls
api.interceptors.request.use(
  (config) => {
    // You can add auth tokens here if needed
    return config;
  },
  (error) => {
    return Promise.reject(error);
  }
);

// Response interceptor for API calls
api.interceptors.response.use(
  (response) => {
    return response;
  },
  async (error: AxiosError) => {
    const originalRequest = error.config;
    
    // Handle errors globally
    if (error.code === 'ECONNABORTED') {
      console.log('Request timeout - backend may be starting up from sleep mode');
      // Add a user-friendly message
      return Promise.reject(new Error('The server is waking up from sleep mode. Please try again in a moment.'));
    }
    
    if (error.response?.status === 503 || error.response?.status === 502) {
      console.log('Service unavailable - backend may be starting up from sleep mode');
      // Add a user-friendly message
      return Promise.reject(new Error('The server is currently waking up. Please try again in a moment.'));
    }
    
    // For all other errors, just reject normally
    return Promise.reject(error);
  }
);

export default api;
